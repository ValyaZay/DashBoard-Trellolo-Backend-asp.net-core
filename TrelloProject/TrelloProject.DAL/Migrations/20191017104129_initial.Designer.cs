// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrelloProject.DAL.EF;

namespace TrelloProject.DAL.Migrations
{
    [DbContext(typeof(TrelloDbContext))]
    [Migration("20191017104129_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.BackgroundColor", b =>
                {
                    b.Property<int>("BackgroundColorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorHex");

                    b.Property<string>("ColorName");

                    b.HasKey("BackgroundColorId");

                    b.ToTable("BackgroundColors");

                    b.HasData(
                        new
                        {
                            BackgroundColorId = 1,
                            ColorHex = "#C0C0C0",
                            ColorName = "Grey"
                        },
                        new
                        {
                            BackgroundColorId = 2,
                            ColorHex = "#ffff00",
                            ColorName = "Yellow"
                        },
                        new
                        {
                            BackgroundColorId = 3,
                            ColorHex = "#FFA500",
                            ColorName = "Orange"
                        },
                        new
                        {
                            BackgroundColorId = 4,
                            ColorHex = "#0000FF",
                            ColorName = "Blue"
                        },
                        new
                        {
                            BackgroundColorId = 5,
                            ColorHex = "#008000",
                            ColorName = "Green"
                        });
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentBackgroundColorId");

                    b.Property<string>("Title");

                    b.HasKey("BoardId");

                    b.HasIndex("CurrentBackgroundColorId");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasFilter("[Title] IS NOT NULL");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            BoardId = 1,
                            CurrentBackgroundColorId = 1,
                            Title = "ManagerBoard"
                        });
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssigneeId");

                    b.Property<int>("CardListId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Hidden");

                    b.Property<string>("Title");

                    b.HasKey("CardId");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CardListId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            AssigneeId = "2",
                            CardListId = 1,
                            CreatedById = "1",
                            CreatedDate = new DateTime(2019, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Just create a new task",
                            Hidden = false,
                            Title = "Create a task"
                        },
                        new
                        {
                            CardId = 2,
                            AssigneeId = "3",
                            CardListId = 1,
                            CreatedById = "1",
                            CreatedDate = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Implement INewInterface now",
                            Hidden = false,
                            Title = "Implement an Interface"
                        });
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.CardComment", b =>
                {
                    b.Property<int>("CardCommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("RefersToId");

                    b.Property<string>("Text");

                    b.HasKey("CardCommentId");

                    b.HasIndex("CardId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RefersToId");

                    b.ToTable("CardComments");

                    b.HasData(
                        new
                        {
                            CardCommentId = 1,
                            CardId = 1,
                            CreatedById = "2",
                            CreatedDate = new DateTime(2019, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Good comment"
                        },
                        new
                        {
                            CardCommentId = 2,
                            CardId = 1,
                            CreatedById = "2",
                            CreatedDate = new DateTime(2019, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RefersToId = 1,
                            Text = "Bad comment"
                        });
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.CardList", b =>
                {
                    b.Property<int>("CardListId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardId");

                    b.Property<int>("Order");

                    b.Property<string>("Title");

                    b.HasKey("CardListId");

                    b.HasIndex("BoardId");

                    b.ToTable("CardLists");

                    b.HasData(
                        new
                        {
                            CardListId = 1,
                            BoardId = 1,
                            Order = 0,
                            Title = "ToDo"
                        },
                        new
                        {
                            CardListId = 2,
                            BoardId = 1,
                            Order = 1,
                            Title = "Done"
                        },
                        new
                        {
                            CardListId = 3,
                            BoardId = 1,
                            Order = 2,
                            Title = "DoNOTDo"
                        });
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab9dd962-6812-4ed8-bcc1-efb583a80d72",
                            Email = "valya@valya.net",
                            EmailConfirmed = false,
                            FirstName = "Valya",
                            LastName = "Zay",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9beec757-76af-40c8-9508-3b2413b0d8c8",
                            Email = "vova@vova.com",
                            EmailConfirmed = false,
                            FirstName = "Vova",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5f4cefc-ecee-4f0e-a69f-6134b219aed9",
                            Email = "gora@gora.net",
                            EmailConfirmed = false,
                            FirstName = "Gora",
                            LastName = "Sidorov",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.UserBoard", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("BoardId");

                    b.HasKey("UserId", "BoardId");

                    b.HasIndex("BoardId");

                    b.ToTable("UserBoards");

                    b.HasData(
                        new
                        {
                            UserId = "2",
                            BoardId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrelloProject.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.Board", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.BackgroundColor", "BackgroundColor")
                        .WithMany("Boards")
                        .HasForeignKey("CurrentBackgroundColorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.Card", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.User", "Assignee")
                        .WithMany("CardsAssigned")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("TrelloProject.DAL.Entities.CardList", "CardList")
                        .WithMany("Cards")
                        .HasForeignKey("CardListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrelloProject.DAL.Entities.User", "CreatedBy")
                        .WithMany("CardsCreated")
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.CardComment", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.Card", "Card")
                        .WithMany("CardComments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrelloProject.DAL.Entities.User", "CreatedBy")
                        .WithMany("CardComments")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TrelloProject.DAL.Entities.CardComment", "RefersTo")
                        .WithMany()
                        .HasForeignKey("RefersToId");
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.CardList", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.Board", "Board")
                        .WithMany("CardLists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrelloProject.DAL.Entities.UserBoard", b =>
                {
                    b.HasOne("TrelloProject.DAL.Entities.Board", "Board")
                        .WithMany("UserBoards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrelloProject.DAL.Entities.User", "User")
                        .WithMany("UserBoards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
